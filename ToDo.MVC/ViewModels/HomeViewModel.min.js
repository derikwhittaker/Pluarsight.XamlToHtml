var ToDo;(function(n){var i=function(){function n(){var n=this;this.ToDos=ko.observableArray(),this.OriginalToDos=ko.observableArray(),this.FilterText=ko.observable(""),this.fetchRemoteToDoList(),this.OverdueCount=ko.computed(function(){return _.filter(n.ToDos(),function(n){return n.Status()=="Overdue"}).length}),this.ActiveCount=ko.computed(function(){return _.filter(n.ToDos(),function(n){return n.Status()=="Active"}).length}),this.TotalCount=ko.computed(function(){return n.ToDos().length})}return n.prototype.addNewToDo=function(){var i=new t(undefined),n;i.Task("Hello"),n="#todo-edit-modal",$(n).modal("show");$(n).on("shown",function(){i.fetchData();var t=$(n)[0];ko.applyBindings(i,t)});$(n).on("hide",function(){ko.cleanNode($(n)[0]),$(n).off("shown hide")})},n.prototype.deleteToDo=function(n){var t=this,i="http://localhost:8888/ToDoServices/api/ToDo/Delete/"+n;$.ajax({url:i,type:"DELETE",success:function(){t.OriginalToDos.removeAll(),t.ToDos.removeAll(),t.fetchRemoteToDoList()},error:function(){}})},n.prototype.filterList=function(){var n=this,t;n.FilterText().length==0?n.ToDos(n.OriginalToDos()):(t=_.filter(n.OriginalToDos(),function(t){return t.Task().toLowerCase().indexOf(n.FilterText().toLowerCase())>=0}),n.ToDos(t))},n.prototype.fetchRemoteToDoList=function(){var i=this,n=this;$.ajax({url:"http://localhost:8888/ToDoServices/api/ToDo/",type:"Get",success:function(r){var u=n.ToDos();_.each(r,function(n){var r=new t(n);r.Parent=i,u.push(r)}),n.ToDos.valueHasMutated()},error:function(){}}),this.OriginalToDos(this.ToDos())},n}(),t;n.HomeViewModel=i,t=function(){function n(n){var t=this,i;this.Parent=undefined,this.Id=ko.observable(0),this.Task=ko.observable(""),this.DueDate=ko.observable(),this.ReminderDate=ko.observable(),this.Priority=ko.observable(""),this.Category=ko.observable(""),this.Status=ko.observable(""),this.Priorities=ko.observableArray(),this.SelectedPriority=ko.observable(),this.Categories=ko.observableArray(),this.SelectedCategory=ko.observable(),this.Statuses=ko.observableArray(),this.SelectedStatus=ko.observable(),this.remoteCallCounter=0,this.totalRemoteCallsExpected=3,n!=undefined&&(i=n.ReminderDate?moment(n.ReminderDate).format("MM/DD/YYYY"):"",this.Id(n.Id),this.Task(n.Task),this.DueDate(moment(n.DueDate).format("MM/DD/YYYY")),this.ReminderDate(i),this.Priority(n.Priority.Description),this.Category(n.Category.Description),this.Status(n.Status.Description)),this.StatusStyle=ko.computed(function(){switch(t.Status()){case"Active":return"circle status-active-color";case"Overdue":return"circle status-overdue-color";case"Completed":return"circle status-completed-color"}}),this.IsCompleted=ko.computed(function(){return t.Status()=="Completed"})}return n.prototype.fetchData=function(){this.remoteCallCounter=0,this.fetchCategories(),this.fetchPriorities(),this.fetchStatuses()},n.prototype.fetchCategories=function(){var n=this;$.ajax({url:"http://localhost:8888/ToDoServices/api/Meta/Categories",type:"Get",success:function(t){n.totalRemoteCallsExpected++,n.Categories(t)}})},n.prototype.fetchPriorities=function(){var n=this;$.ajax({url:"http://localhost:8888/ToDoServices/api/Meta/Priorities",type:"Get",success:function(t){n.totalRemoteCallsExpected++,n.Priorities(t)}})},n.prototype.fetchStatuses=function(){var n=this;$.ajax({url:"http://localhost:8888/ToDoServices/api/Meta/Statuses",type:"Get",success:function(t){n.totalRemoteCallsExpected++,n.Statuses(t)}})},n}(),n.ToDoViewModel=t})(ToDo||(ToDo={}))